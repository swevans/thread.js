{"name":"Thread.js","tagline":"this is some tagline","body":"# Thread.js\r\n### Multi-threaded Programming with Javascript or TypeScript\r\n*******\r\n\r\n## Installation\r\nInclude thread.js in your projects like so:\r\n#### Tag Loading\r\n```html\r\n<!-- Full version, recommended for debugging -->\r\n<script src=\"thread.js\"></script>\r\n\r\n<!-- Minified version, recommended for release -->\r\n<script src=\"thread.min.js\"></script>\r\n```\r\n\r\n### Creating and Destroying Threads\r\nSimply instantiate a new thread object to create a thread. Call terminate to dispose of it.\r\n###### Creation and Disposal\r\n```js\r\n// Create a thread using the new keyword\r\nvar myThread = new Thread();\r\n\r\n// ... Do something with the thread\r\n\r\n// Terminate will dispose the thread and release it's WebWorker resources\r\nmyThread.terminate();\r\n```\r\n\r\n### Adding Thread Logic\r\nYou can add logic to a thread by loading external scripts or defining script via code. Loading an external js file is the quickest way to add lots of logic to a thread. Scripts are loaded synchronously within the thread; no other thread code will execute until the script is loaded and evaluated within the thread's scope.\r\n###### Loading Scripts\r\n```js\r\n// Loads two scripts into the thread's scope\r\n// A loads, A evaluates, B loads, B evaluates\r\nmyThread.importScripts(\"scriptA.js\");\r\nmyThread.importScripts(\"scriptB.js\");\r\n\r\n// You can also load multiple scripts at once\r\n// A and B load, A evaluates, B evaluates\r\nmyThread.importScripts(\"scriptA.js\", \"scriptB.js\");\r\n\r\n// Another option is to specify scripts to load in the constructor\r\n// A and B load, A evaluates, B evaluates\r\nvar myThread = new Thread(\"scriptA.js\", \"scriptB.js\");\r\n```\r\n\r\n###### Defining Script\r\n```js\r\n/** An example function to run on a thread. */\r\nfunction myEchoFunc(a, b)\r\n{\r\n  console.log(\"Echo on thread: \" + a + \" \" + b);\r\n}\r\n\r\n// Copies a named function to the thread's global scope\r\nmyThread.defineFunc(myEchoFunc);\r\n\r\n// Defines a variable in thread's global scope\r\nmyThread.defineVar(\"myVarName\");\r\n```\r\n\r\n### Running Thread Logic\r\nYou can invoke logic on a thread using a few Thread methods.\r\n###### Calling Functions\r\n```js\r\n// You can call any named function that is loaded or defined in the thread\r\n// You may optionally provide a list of paramaters\r\n// Parameters may be any json cloneable object\r\nmyThread.call(\"myEchoFunc\", \"My name is: \", \"Bob\"); // supply 2 params\r\nmyThread.call(\"someOtherFunc\");                     // no params\r\nmyThread.call(\"myNamespace.anotherFunc\");\r\n```\r\n\r\n###### Anonymous Functions\r\n```js\r\n// You can also temporarily define a function and call it once\r\n// You can pass the name of a named function or an anonymouse function\r\n// Exec will temporarily define the function, then call it\r\nmyThread.exec(function(param1) { /* do something */ }, \"paramValue\");\r\n```\r\n\r\n###### Constructing Objects\r\n```js\r\n// You can also construct any named function in the thread\r\n// You can optionally provide a list of paramaters\r\n// This example constructs MyClassName with a string and object param\r\nmyThread.construct(\"MyClassName\", \"param1\", {someIndex: 99});\r\nmyThread.construct(\"myNamespace.MyNamespacedClass\");  // You can use namespaces\r\n```\r\n\r\n\r\n\r\nThread.js\r\n===========\r\n\r\n### Multi-threaded Programming with Javascript or TypeScript\r\n*******\r\n\r\nThread.js is an easy to use library for leveraging the power of parallel computing in JavaScript or TypeScript. Thread.js provides an intuitive, no-hassle interface for creating, interacting with, and disposing of Web Workers. \r\n\r\n# Installation\r\nInclude thread.js in your web projects like so:\r\n```html\r\n<script src=\"threadjs.js\"></script>\r\n```\r\n\r\n#Usage\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<ol>\r\n<li>Worker Queuing - If more than the optimal number of threads are created, later threads will queue until resources become available.</li>\r\n<li>Event Based Messaging - Messages to and from threads are powered by the widly understood EventTarget interface (addEventListener).</li>\r\n</ol>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}